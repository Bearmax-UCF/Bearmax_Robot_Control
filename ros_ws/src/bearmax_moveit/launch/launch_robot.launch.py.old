import os

from ament_index_python.packages import get_package_share_directory

from launch import LaunchDescription
from launch_ros.actions import Node
from launch.actions import IncludeLaunchDescription, TimerAction
from moveit_configs_utils import MoveItConfigsBuilder
from launch.launch_description_sources import PythonLaunchDescriptionSource
from launch.actions import RegisterEventHandler
from launch.event_handlers import OnProcessStart


"""
- static_virtual_joint_tfs
- rsp
- move_group
- ros2_control_node + controller spawners
"""

def generate_launch_description():
    moveit_config = (
        MoveItConfigsBuilder("robot", package_name="bearmax_moveit_config")
        .robot_description(file_path="config/robot.urdf.xacro")
        .trajectory_execution(file_path="config/ros2_controllers_good.yaml")
        .to_moveit_configs()
    )

    virtual_joints_launch = IncludeLaunchDescription(
        PythonLaunchDescriptionSource(
            os.path.join(
                get_package_share_directory("bearmax_moveit_config"),
                'launch',
                'static_virtual_joint_tfs.launch.py')
        )
    )

    rsp = IncludeLaunchDescription(
        PythonLaunchDescriptionSource(
            os.path.join(
                get_package_share_directory("bearmax_moveit_config"),
                'launch',
                'rsp.launch.py')
        )
    )

    move_group = IncludeLaunchDescription(
        PythonLaunchDescriptionSource(
            os.path.join(
                get_package_share_directory("bearmax_moveit_config"),
                'launch',
                'move_group.launch.py')
        )
    )

    # Load controllers
    """
    load_controllers = []
    for controller in [
        "panda_arm_controller",
        "panda_hand_controller",
        "joint_state_broadcaster",
    ]:
        load_controllers += [
            ExecuteProcess(
                cmd=["ros2 run controller_manager spawner {}".format(controller)],
                shell=True,
                output="screen",
            )
        ]
    """

    ros2_control_node = Node(
        package="controller_manager",
        executable="ros2_control_node",
        parameters=[
            moveit_config.robot_description,
            os.path.join(
                moveit_config.package_path,
                "config",
                "ros2_controllers_good.yaml"
            )
        ]
    )

    controllers = IncludeLaunchDescription(
        PythonLaunchDescriptionSource(
            os.path.join(
                get_package_share_directory("bearmax_moveit_config"),
                'launch',
                'spawn_controllers.launch.py')
        )
    )

    delayed_controllers_spawner = RegisterEventHandler(
        event_handler=OnProcessStart(
            target_action=ros2_control_node,
            on_start=[controllers]
        )
    )

    return LaunchDescription(
        [
            virtual_joints_launch,
            rsp,
            move_group,
            ros2_control_node,
            delayed_controllers_spawner,
        ]
    )
